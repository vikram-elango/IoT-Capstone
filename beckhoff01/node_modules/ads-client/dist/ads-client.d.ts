import EventEmitter from "events";
import * as ADS from './ads-commons';
import type { ActiveSubscription, ActiveSubscriptionContainer, AdsClientConnection, AdsClientSettings, AdsCommandToSend, AdsDataTypeContainer, AdsSymbolContainer, ConnectionMetaData, SubscriptionSettings, ReadValueResult, WriteValueResult, VariableHandle, RpcMethodCallResult, CreateVariableHandleMultiResult, ReadRawMultiResult, ReadRawMultiCommand, WriteRawMultiResult, DeleteVariableHandleMultiResult, ReadWriteRawMultiResult, ReadWriteRawMultiCommand, WriteRawMultiCommand, SubscriptionCallback, DebugLevel, AdsClientEvents, SendAdsCommandWithFallbackResult } from "./types/ads-client-types";
import { AdsAttributeEntry, AdsDataType, AdsDeviceInfo, AdsResponse, AdsState, AdsSymbol, AmsAddress, AmsTcpPacket, AdsUploadInfo, AdsTcSystemExtendedState } from "./types/ads-protocol-types";
export type * from "./types/ads-client-types";
export type * from './types/ads-protocol-types';
export type * from './client-error';
/**
 * Common ADS constants and helper functions
 *
 * @category Client
 */
export * as ADS from './ads-commons';
/**
 * A class for handling TwinCAT ADS protocol communication.
 *
 * Settings are provided in constructor - see {@link Client.constructor} and {@link AdsClientSettings}.
 *
 * A client instance should be created for each target.
 * However, a single client instance can also be used to communicate with
 * multiple endpoints using the `targetOpts` parameter available in all methods.
 *
 * Client also emits different events, such as `client.on('connect', ...)`.
 * See {@link AdsClientEvents} for all available events.
 *
 * @example
 * ```js
 * const client = new Client({
 *  targetAmsNetId: "192.168.4.1.1.1",
 *  targetAdsPort: 851
 * });
 * ```
 *
 * @category Client
 */
export declare class Client extends EventEmitter<AdsClientEvents> {
    /**
     * Debug instance for debug level 1.
     */
    private debug;
    /**
     * Debug instance for debug level 2.
     */
    private debugD;
    /**
     * Debug instance for debug level 3.
     */
    private debugIO;
    /**
     * Active debug level.
     */
    private debugLevel_;
    /**
     * Default metadata (when no active connection).
     */
    private defaultMetaData;
    /**
     * Callback used for AMS/TCP commands, such as port registering.
     *
     * When a response is received, `amsTcpCallback` is called with the response packet.
     */
    private amsTcpCallback?;
    /**
     * Buffer for received data.
     *
     * All received data from TCP socket is copied here for further processing.
     */
    private receiveBuffer;
    /**
     * Used TCP socket instance.
     */
    private socket?;
    /**
     * Handler for socket error event.
     *
     * Called when the socket emits error event (`socket.on("error")`).
     */
    private socketErrorHandler?;
    /**
     * Handler for socket close event.
     *
     * Called when the socket emits error event (`socket.on("close")`).
     */
    private socketConnectionLostHandler?;
    /**
     * Timer handle and ID of the timer used for automatic reconnecting.
     */
    private reconnectionTimer;
    /**
     * Timer handle and ID of the timer used for reading TwinCAT system state.
     */
    private tcSystemStatePollerTimer;
    /**
     * Timer handle of the timer used for detecting ADS port registeration timeout.
     */
    private portRegisterTimeoutTimer?;
    /**
     * Container for previous subscriptions that were active
     * before reconnecting or when PLC runtime symbol version changed.
     */
    private previousSubscriptions?;
    /**
     * Active ADS requests that are waiting for responses.
     */
    private activeAdsRequests;
    /**
     * Next invoke ID to be used for ADS requests.
     */
    private nextInvokeId;
    /**
     * Timestamp (epoch) when the conection to the remote was lost for the first time.
     *
     * Used for detecting if the connection has been lost for long enough
     * for starting the reconnection.
     */
    private connectionDownSince?;
    /**
     * Active debug level (read-only).
     *
     * Use {@link Client.setDebugLevel} for setting debug level.
     *
     * Debug levels:
     *  - 0: no debugging (default)
     *  - 1: basic debugging (`$env:DEBUG='ads-client'`)
     *  - 2: detailed debugging (`$env:DEBUG='ads-client,ads-client:details'`)
     *  - 3: detailed debugging with raw I/O data (`$env:DEBUG='ads-client,ads-client:details,ads-client:raw-data'`)
     *
     * Debug data is available in the console (See [Debug](https://www.npmjs.com/package/debug) library for mode).
    */
    get debugLevel(): Readonly<DebugLevel>;
    /**
     * Active client settings.
     *
     * You can change some settings directly from this object on the fly, mainly
     * some non-communication related ones.
     *
     * If the client is not yet connected, it's OK to change all settings from here.
     *
     * However, the most correct way is to use the {@link Client.constructor}.
     *
     * @example
     *
     * ```js
     * client.settings.convertDatesToJavascript = false; //OK
     * client.settings.targetAdsPort = 852; //Not OK if already connected (some things might break)
     * ```
     */
    settings: Required<AdsClientSettings>;
    /**
     * Active connection information.
     *
     * See {@link AdsClientConnection}
     */
    connection: AdsClientConnection;
    /**
     * Active connection metadata.
     *
     * Metadata includes target device information, symbols, data types and so on.
     *
     * Some properties might not be available in all connection setups and setting combinations.
     */
    metaData: ConnectionMetaData;
    /**
     * Container for all active subscriptions.
     *
     * Do not edit this directly.
     */
    activeSubscriptions: ActiveSubscriptionContainer;
    /**
     * Creates a new ADS client instance.
     *
     * Settings are provided in `settings` parameter - see {@link AdsClientSettings}.
     *
     * @example
     *
     * ```js
     * const client = new Client({
     *  targetAmsNetId: "192.168.4.1.1.1",
     *  targetAdsPort: 851
     * });
     * ```
     */
    constructor(settings: AdsClientSettings);
    /**
     * Emits a warning, which results in a `warning` event, and a console message if `hideConsoleWarnings` is not set.
     *
     * @param message Warning message
     */
    private warn;
    /**
     * Clears given timer if it's available and increases the ID.
     *
     * @param timerObject Timer object
     */
    private clearTimer;
    /**
     * Returns target AMS address as a string in a format `amsNetId:port`.
     *
     * @param targetOpts Optional target settings that override values in `settings`
     */
    private targetToString;
    /**
     * Writes given data buffer to the socket.
     *
     * @param data Data to write
     */
    private socketWrite;
    /**
     * Connects to the target.
     *
     * @param isReconnecting If `true`, reconnecting is in progress
     */
    private connectToTarget;
    /**
     * Unregisters ADS port from the router (if required and disconnects from the target.
     *
     * @param forceDisconnect If `true`, the connection is dropped immediately (default: `false`)
     * @param isReconnecting If `true`, reconnecting is in progress (default: `false`)
     */
    private disconnectFromTarget;
    /**
     * Backups subscriptions, disconnects from the target, connects again to the target
     * and restores the subscriptions.
     *
     * @param forceDisconnect If `true`, the connection is dropped immediately (default: `false`)
     * @param isReconnecting If `true`, reconnecting is in progress (default: `false`)
     *
     * @throws Throws an error if connecting fails
     */
    private reconnectToTarget;
    /**
     * Registers a free ADS port from the AMS router.
     *
     * If the `settings.localAmsNetId` and `settings.localAdsPort` are set, does nothing.
     */
    private registerAdsPort;
    /**
     * Unregisters a previously registered ADS port from the AMS router.
     *
     * The remote seems to drop TCP connection after unregistering,
     * so basically calling this always disconnects too.
     */
    private unregisterAdsPort;
    /**
     * Configures the connection to handle a TwinCAT PLC connection, which is the default
     * assumption when using ads-client.
     *
     * This is not called if the `settings.rawClient` is `true`.
     */
    private setupPlcConnection;
    /**
     * Starts a poller that will read TwinCAT system state every `settings.connectionCheckInterval` milliseconds.
     *
     * This is used to detect connection operation and if the target TwinCAT system state has changed.
     *
     * This is not called if the `settings.rawClient` is `true`.
     */
    private startTcSystemStatePoller;
    /**
     * Reads active TwinCAT system state and detects if it has changed or if the connection is down.
     *
     * This is called from timer started by `startTcSystemStatePoller()`.
     *
     * Afterwards starts the poller timer again.
     */
    private checkTcSystemState;
    /**
     * A subscription callback that is called when the target PLC runtime state has changed.
     *
     * This is not called if the `settings.rawClient` is `true`.
     *
     * @param data Received data
     * @param subscription The subscription object (unused here)
     */
    private onPlcRuntimeStateChanged;
    /**
     * Checks if PLC runtime state has changed, and if so, emits an event.
     *
     * Call from `onPlcRuntimeStateChanged()` and `readPlcRuntimeState()`.
     *
     * @param state Active PLC runtime state
     */
    private handlePlcRuntimeStateChange;
    /**
     * A subscription callback that is called when the target PLC runtime symbol version has changed.
     *
     * @param data Received data
     * @param subscription The subscription object (unused here)
     */
    private onPlcSymbolVersionChanged;
    /**
     * Event listener callback for TCP socket error event.
     *
     * See also {@link Client.socketErrorHandler} which is `onSocketError.bind(this)`
     */
    private onSocketError;
    /**
     * Handles a lost connection, called when connection to the remote is lost.
     *
     * The connection might be lost for example due to a closed socket, socket error,
     * TwinCAT system state change or local router state change.
     *
     * @param socketFailure If `true`, the connection was lost due to a TCP socket problem (default: `false`)
     */
    private onConnectionLost;
    /**
     * Creates an AMS/TCP request from given packet object.
     *
     * @param packet Object containing the full AMS/TCP packet
     */
    private createAmsTcpRequest;
    /**
     * Creates an AMS header from given packet object.
     *
     * @param packet Object containing the full AMS/TCP packet
     */
    private createAmsHeader;
    /**
     * Creates an AMS/TCP header from given packet and AMS header
     *
     * @param packet Object containing the full AMS/TCP packet
     * @param amsHeader Buffer containing the previously created AMS header
     */
    private createAmsTcpHeader;
    /**
     * Checks received data buffer for full AMS packets.
     *
     * If a full packet is found, it is passed forward.
     *
     * Calls itself recursively if multiple packets available.
     * If so, calls also `setImmediate()` to prevent blocking the event loop.
     */
    private handleReceivedData;
    /**
     * Parses an AMS/TCP packet from given buffer and then handles it.
     *
     * @param data Buffer that contains data for a single full AMS/TCP packet
     */
    private parseAmsTcpPacket;
    /**
     * Parses an AMS/TCP header from given buffer.
     *
     * Returns the rest of the payload as data,
     *
     * @param data Buffer that contains data for a single full AMS/TCP packet
     */
    private parseAmsTcpHeader;
    /**
     * Parses an AMS header from given buffer.
     *
     * Returns the rest of the payload as data.
     *
     * @param data Buffer that contains data for a single AMS packet (without AMS/TCP header)
     */
    private parseAmsHeader;
    /**
     * Parses ADS data from given buffer.
     *
     * Uses `packet.ams` to determine the ADS command.
    *
    * @param data Buffer that contains data for a single ADS packet (without AMS/TCP header and AMS header)
    */
    private parseAdsResponse;
    /**
     * Handles the parsed AMS/TCP packet and actions/callbacks related to it.
     *
     * @param packet Fully parsed AMS/TCP packet, includes AMS/TCP header and if available, also AMS header and ADS data
     */
    private onAmsTcpPacketReceived;
    /**
     * Handles received ADS command.
     *
     * @param packet Fully parsed AMS/TCP packet, includes AMS/TCP header, AMS header and ADS data
     */
    private onAdsCommandReceived;
    /**
     * Called when local AMS router state has changed (router notification is received).
     *
     * Router state changes multiple times for example when local TwinCAT system
     * is changed from `Config` -> `Run` and vice-versa. If connected to a local system, router state changes might also cause
     * client the reconnect automatically.
     *
     * Router state is received from the router with AMS command `AMS_TCP_PORT_ROUTER_NOTE` (see {@link ADS.AMS_HEADER_FLAG.AMS_TCP_PORT_ROUTER_NOTE})
     *
     * @param state New router state
     */
    private onRouterStateChanged;
    /**
     * Parses received ADS notification data (stamps) from given data.
     *
     * @param data Raw data to convert
     */
    private parseAdsNotification;
    /**
     * Adds a new subscription to the target (an ADS device notification).
     *
     * Sends a `AddNotification` ADS command.
     *
     * @param settings Subscription settings / subscription to add
     * @param internal If `true`, this is an internal subscription of the client
     * @param targetOpts Optional target settings that override values in `settings` (**NOTE:** If used, no caching is available -> possible performance impact)
     */
    private addSubscription;
    /**
     * Unsubscribes from all active subscriptions.
     *
     * @param internals If `true`, also internal subscriptions are unsubscribed
     */
    private removeSubscriptions;
    /**
     * Backups active subscriptions for restoring them later (after reconnecting).
     *
     * Returns number of subscriptions that were saved for restoring.
     *
     * @param unsubscribe If `true`, {@link Client.unsubscribeAll()} is also called after saving
     */
    private backupSubscriptions;
    /**
     * Restores all previously backed up subscriptions.
     *
     * Returns array of subscription targets that failed to be subscribed
     * (empty array if all were restored successfully).
     */
    private restoreSubscriptions;
    /**
     * Parses symbol from raw ADS response payload.
     *
     * @param data Data containing ADS symbol (without first 4 bytes of ADS payload containing entry length)
     */
    private parseAdsResponseSymbol;
    /**
     * Parses data type declaration from raw ADS response payload.
     *
     * @param data Data containing data type declaration (without first 4 bytes of ADS payload containing entry length)
     */
    private parseAdsResponseDataType;
    /**
     * Gets data type declaration for requested data type.
     *
     * **NOTE:** Only returns the requested data type and its direct children. Not the children of children.
     *
     * To get the full datatype with all items, use {@link Client.buildDataType()}.
     *
     * Returns previously cached value if available, otherwise reads it from the target
     * and caches it.
     *
     * If caching is disabled using `settings.disableCaching`, data is always read from the target.
     *
     * If `targetOpts` is used to override target, caching is always disabled.
     *
     * @param name Data type name in the PLC (such as `ST_Struct`)
     * @param targetOpts Optional target settings that override values in `settings` (**NOTE:** If used, no caching is available -> possible performance impact)
     */
    private getDataTypeDeclaration;
    /**
     * Builds full data type declaration for requested data type with all children (and their children and so on).
     *
     * If available, previously cached data is used for building the full data type. Otherwise data is read from the target
     * and cached.
     *
     * If caching is disabled using `settings.disableCaching`, data is always read from the target.
     *
     * If `targetOpts` is used to override target, caching is always disabled.
     *
     * @param name Data type name in the PLC (such as `ST_Struct`)
     * @param targetOpts Optional target settings that override values in `settings` (**NOTE:** If used, no caching is available -> possible performance impact)
     * @param isRootType If `true`, this is the root type / first call / not recursive call (default: `true`)
     * @param knownSize Data type size (if known) - used with pseudo data types and TwinCAT 2 primite types
     */
    private buildDataType;
    /**
     * Converts raw data to Javascript object (primitive PLC types only)
     *
     * @param buffer The raw data to convert
     * @param dataType Target data type
     * @param attributes Additional attributes of the symbol or data type to use for conversion
     */
    private convertBufferToPrimitiveType;
    /**
     * Extracts TcEncoding attribute from the data datatype attributes or additional attributes
     *
     * @param dataType The data type
     * @param attributes Additional attributes of the symbol or data type
     */
    private getStringDataTypeEncoding;
    /**
     * Converts raw data to Javascript object.
     *
     * This is usually called recursively.
     *
     * @param data The raw data to convert
     * @param dataType Target data type
     * @param attributes Additional attributes of the symbol or data type used for conversion
     * @param isArrayItem If `true`, this is an array item (default: `false`)
     */
    private convertBufferToObject;
    /**
     * Converts a Javascript object to raw data.
     *
     * @param value Javascript object to convert
     * @param dataType Target data type
     * @param attributes Additional attributes of the symbol or data type used for conversion
     * @param objectPath Object path that is passed forward when calling recursively. This is used for error reporting if a property is missing
     * @param isArrayItem If `true`, this is an array item (default: `false`)
     */
    private convertObjectToBuffer;
    /**
     * Converts a Javascript object (that is PLC primitive type) to raw data
     *
     * @param value Javascript object to convert
     * @param dataType Data type
     * @param buffer Reference to Buffer object where to write the raw value
     * @param attributes Additional attributes of the symbol or data type used for conversion
     */
    private convertPrimitiveTypeToBuffer;
    /**
     * Merges objects recursively.
     *
     * Used for example in {@link Client.writeValue()} when `autoFill` setting is used
     * to merge active values (missing properties) to user-provided properties.
     *
     * This is based on https://stackoverflow.com/a/34749873/8140625
     * and https://stackoverflow.com/a/49727784/8140625 with some changes.
     *
     * @param caseSensitive If `true`, the property keys are handled as case-sensitive (as they normally are). In TwinCAT everything is case-insensitive --> `false`.
     * @param target Target object where to merge source objects (this is the value provide by user)
     * @param sources One or more source object, which keys are merged to target if target is missing them
     */
    private deepMergeObjects;
    /**
     * Connects to the target that is configured in {@link Client.settings} (set in {@link Client.constructor}).
     *
     * If success, returns the connection information (see {@link AdsClientConnection})
     *
     * @throws Throws an error if connecting fails
     *
     * @example
     * ```js
     * try {
     *  const res = await client.connect();
     *
     *  console.log(`Connected to the ${res.targetAmsNetId}`);
     *  console.log(`Router assigned us AmsNetId ${res.localAmsNetId} and port ${res.localAdsPort}`);
     * } catch (err) {
     *  console.log("Connecting failed:", err);
     * }
     * ```
     */
    connect(): Promise<Required<AdsClientConnection>>;
    /**
     * Disconnects from the target and closes active connection.
     *
     * Subscriptions are deleted in a handled manner and ADS port is unregisterd.
     *
     * **WARNING:** If `force` is used, active subscriptions are not deleted!
     * This affects PLCs performance in the long run.
     *
     * @param force If `true`, the connection is dropped immediately (uncontrolled) - use only in special "emergency" cases (default: `false`)
     *
     * @throws Throws an error if disconnecting fails. However the connection stil ended.
     *
     * @example
     * ```js
     * try {
     *  const res = await client.disconnect();
     *  console.log("Disconnected");
     * } catch (err) {
     *  console.log("Disconnected with error:", err);
     * }
     * ```
     */
    disconnect(force?: boolean): Promise<void>;
    /**
     * Reconnects to the target (disconnects and then connects again).
     *
     * Active subscriptions are saved and restored automatically after reconnecting.
     *
     * **WARNING:** If `forceDisconnect` is used, active subscriptions are not deleted!
     * This affects PLCs performance in the long run.
     *
     * @param forceDisconnect If `true`, the connection is dropped immediately (uncontrolled - as `force` in {@link Client.disconnect()}) - use only in special "emergency" cases (default: `false`)
     *
     * @throws Throws an error if connecting fails
     */
    reconnect(forceDisconnect?: boolean): Promise<Required<AdsClientConnection>>;
    /**
     * Sets active debug level.
     *
     * Debug levels:
     *  - 0: no debugging (default)
     *  - 1: basic debugging (`$env:DEBUG='ads-client'`)
     *  - 2: detailed debugging (`$env:DEBUG='ads-client,ads-client:details'`)
     *  - 3: detailed debugging with raw I/O data (`$env:DEBUG='ads-client,ads-client:details,ads-client:raw-data'`)
     *
     * Debug data is available in the console (See [Debug](https://www.npmjs.com/package/debug) library for mode).
     */
    setDebugLevel(level: DebugLevel): void;
    /**
     * Sends a raw ADS command to the target.
     *
     * This can be useful in some special cases or custom system. See {@link ADS.ADS_COMMAND} for common commands.
     *
     * **NOTE:** Client already includes all the most common commands:
     * - {@link Client.readRaw}() - `Read` command
     * - {@link Client.writeRaw}() - `Write` command
     * - {@link Client.readDeviceInfo}() - `ReadDeviceInfo` command
     * - {@link Client.readState}() - `ReadState` command
     * - {@link Client.writeControl}() - `WriteControl` command
     * - {@link Client.subscribe}() - `AddNotification` command
     * - {@link Client.unsubscribe}() - `DeleteNotification` command
     * - {@link Client.readWriteRaw}() - `ReadWrite` command
     *
     * @example
     * ```js
     * try {
     *  //Creating readRaw(16448, 414816, 2) command manually and sending it using sendAdsCommand()
     *
     *  const data = Buffer.alloc(12);
     *  let pos = 0;
     *
     *  //0..3 IndexGroup
     *  data.writeUInt32LE(16448, pos);
     *  pos += 4;
     *
     *  //4..7 IndexOffset
     *  data.writeUInt32LE(414816, pos);
     *  pos += 4;
     *
     *  //8..11 Read data length
     *  data.writeUInt32LE(2, pos);
     *  pos += 4;
     *
     *  const res = await this.sendAdsCommand<AdsReadResponse>({
     *    adsCommand: ADS.ADS_COMMAND.Read,
     *    targetAmsNetId: targetOpts.amsNetId,
     *    targetAdsPort: targetOpts.adsPort,
     *    payload: data
     *  });
     *
     *  console.log(res.ads.payload); //<Buffer ff 7f>
     *
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param command The ADS command to send
     *
     * @template T In Typescript, the type of the ADS response. If omitted, generic {@link AdsResponse} type is used.
     *
     * @throws Throws an error if sending the command fails or if target responds with an error
     *
     */
    sendAdsCommand<T = AdsResponse>(command: AdsCommandToSend): Promise<AmsTcpPacket<T>>;
    /**
     * Sends a raw ADS command to the target with fallback. A wrapper for {@link Client.sendAdsCommand}().
     *
     * Calls `sendAdsCommand(command)` and if it fails with
     * ADS error 1793 or 1808 then calls the `sendAdsCommand(fallback)`.
     *
     * See {@link Client.readPlcUploadInfo}() for use case.
     *
     * The ideas is copied from TwinCAT.Ads.dll (`TwinCAT.Ads.AdsClientExtensions.ReadWithFallbackAsync()`).
     *
     * @example
     * ```js
     * try {
     *  const data = Buffer.alloc(12);
     *  //...code omitted...
     *
     *  const command = {
     *    adsCommand: ADS.ADS_COMMAND.Read,
     *    targetAmsNetId: targetOpts.amsNetId,
     *    targetAdsPort: targetOpts.adsPort,
     *    payload: data
     *  };
     *
     *  const fbData = Buffer.alloc(12);
     *  //...code omitted...
     *
     *  const fallback = {
     *    adsCommand: ADS.ADS_COMMAND.Read,
     *    targetAmsNetId: targetOpts.amsNetId,
     *    targetAdsPort: targetOpts.adsPort,
     *    payload: fbData
     *  };
     *
     *  const { response: res, fallbackUsed } = await this.sendAdsCommandWithFallback<AdsReadResponse>(command, fallback);
     *
     *  //If we are here, one of those commands was succcesful
     *  if(fallbackUsed) {
     *    console.log("Fallback was used. Result:", res.ads.payload);
     *  } else {
     *    console.log("Fallback was not used. Result:", res.ads.payload);
     *  }
     *
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param command The main ADS command to send
     * @param fallback The fallback ADS command to send
     *
     * @template T In Typescript, the type of the ADS response. If omitted, generic {@link AdsResponse} type is used.
     *
     * @throws Throws an error if sending the command fails or if target responds with an error
     */
    sendAdsCommandWithFallback<T = AdsResponse>(command: AdsCommandToSend, fallback: AdsCommandToSend): Promise<SendAdsCommandWithFallbackResult<T>>;
    /**
     * Sends an ADS `WriteControl` command to the target.
     *
     * More info: [Beckhoff documentation](https://infosys.beckhoff.com/content/1033/tc3_ads_intro/115879947.html?id=4720330147059483431)
     *
     * @param adsState Requested ADS state - see {@link ADS.ADS_STATE}. Can be a number or a valid string, such as `Config`
     * @param deviceState  Requested device state (default: `0`)
     * @param data Additional data to send (if any)
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     *
     * @example
     * ```js
     * try {
     *  //Set target (PLC) to run
     *  await client.writeControl("Run");
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     */
    writeControl(adsState: keyof typeof ADS.ADS_STATE | number, deviceState?: number, data?: Buffer, targetOpts?: Partial<AmsAddress>): Promise<void>;
    /**
     * Starts the target PLC runtime. Same as pressing the green play button in TwinCAT XAE.
     *
     * **NOTE:** This requires that the target is a PLC runtime or has equivalent ADS protocol support.
     *
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if target responds with an error
     *
     * @example
     * ```js
     * try {
     *  await client.startPlc();
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     */
    startPlc(targetOpts?: Partial<AmsAddress>): Promise<void>;
    /**
     * Resets the target PLC runtime. Same as reset cold in TwinCAT XAE.
     *
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     *
     * @example
     * ```js
     * try {
     *  await client.resetPlc();
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     */
    resetPlc(targetOpts?: Partial<AmsAddress>): Promise<void>;
    /**
     * Stops the target PLC runtime. Same as pressing the red stop button in TwinCAT XAE.
     *
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     *
     * @example
     * ```js
     * try {
     *  await client.stopPlc();
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     */
    stopPlc(targetOpts?: Partial<AmsAddress>): Promise<void>;
    /**
     * Restarts the PLC runtime. Same as calling first {@link resetPlc}() and then {@link startPlc}()`
     *
     * **NOTE:** This requires that the target is a PLC runtime or has equivalent ADS protocol support.
     *
     * @example
     * ```js
     * try {
     *  await client.restartPlc();
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     *
     */
    restartPlc(targetOpts?: Partial<AmsAddress>): Promise<void>;
    /**
     * Sets the target TwinCAT system to run mode. Same as **Restart TwinCAT system** in TwinCAT XAE.
     *
     * **NOTE:** As default, also reconnects the client afterwards to restore subscriptions.
     *
     * @example
     * ```js
     * try {
     *  //Reconnect the client
     *  await client.setTcSystemToRun();
     *
     *  //Don't reconnect the client
     *  await client.setTcSystemToRun(false);
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param reconnect If `true`, connection is reconnected afterwards to restore subscriptions etc. (default: `true`)
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     *
     */
    setTcSystemToRun(reconnect?: boolean, targetOpts?: Partial<AmsAddress>): Promise<void>;
    /**
     * Sets the target TwinCAT system to config mode. Same as **Restart TwinCAT (Config mode)** in TwinCAT XAE.
     *
     * **NOTE:** If the target is a PLC runtime, the connection might be lost.
     *
     * @example
     * ```js
     * try {
     *  await client.setTcSystemToConfig();
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     *
     */
    setTcSystemToConfig(targetOpts?: Partial<AmsAddress>): Promise<void>;
    /**
     * Restarts the target TwinCAT system.
     *
     * Just a wrapper for {@link setTcSystemToRun}() - the operation is the same.
     *
     * **NOTE:** As default, also reconnects the client afterwards to restore subscriptions.
     *
     * @example
     * ```js
     * try {
     *  //Reconnect the client
     *  await client.restartTcSystem();
     *
     *  //Don't reconnect the client
     *  await client.restartTcSystem(false);
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param reconnect If `true`, connection is reconnected afterwards to restore subscriptions etc. (default: `true`)
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     *
     */
    restartTcSystem(reconnect?: boolean, targetOpts?: Partial<AmsAddress>): Promise<void>;
    /**
     * Returns a symbol object for given variable path, such as `GVL_Test.ExampleStruct`.
     *
     * Returns previously cached value if available, otherwise reads it from the target
     * and caches it.
     *
     * If caching is disabled using `settings.disableCaching`, data is always read from the target.
     *
     * If `targetOpts` is used to override target, caching is always disabled.
     *
     * **NOTE:** This requires that the target is a PLC runtime or has equivalent ADS protocol support.
     *
     * @example
     * ```js
     * try {
     *  const symbol = await client.getSymbol('GVL_Read.StandardTypes.INT_');
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param path Symbol variable path at the target (such as `GVL_Test.ExampleStruct`)
     * @param targetOpts Optional target settings that override values in `settings`. If used, caching is disabled -> possible performance impact.
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    getSymbol(path: string, targetOpts?: Partial<AmsAddress>): Promise<AdsSymbol>;
    /**
     * Returns full data type declaration for requested data type (such as `ST_Struct`) with all children (and their children and so on).
     *
     * If available, previously cached data is used for building the full data type. Otherwise data is read from the target
     * and cached.
     *
     * If caching is disabled using `settings.disableCaching`, data is always read from the target.
     *
     * If `targetOpts` is used to override target, caching is always disabled.
     *
     * **NOTE:** This requires that the target is a PLC runtime or has equivalent ADS protocol support.
     *
     * @example
     * ```js
     * try {
     *  const dataType = await client.getDataType('ST_Struct');
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param name Data type name at the target (such as `ST_Struct`)
     * @param targetOpts Optional target settings that override values in `settings`. If used, caching is disabled -> possible performance impact.
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    getDataType(name: string, targetOpts?: Partial<AmsAddress>): Promise<AdsDataType>;
    /**
     * Reads target ADS state - see {@link ADS.ADS_STATE}).
     *
     * This is the ADS protocol `ReadState` command.
     *
     * See also {@link readPlcRuntimeState}() and {@link readTcSystemState}().
     *
     * @example
     * ```js
     * try {
     *  const state = await client.readState();
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    readState(targetOpts?: Partial<AmsAddress>): Promise<AdsState>;
    /**
     * Reads target PLC runtime state (usually `Run`, `Stop` etc. - see {@link ADS.ADS_STATE})
     *
     * If `targetOpts` is not used to override target, the state is also
     * saved to the `metaData.plcRuntimeState`.
     *
     * This is the same as {@link readState}(), except that the result is saved to
     * the `metaData.plcRuntimeState`.
     *
     * **NOTE:** This requires that the target is a PLC runtime or has equivalent ADS protocol support.
     *
     * @example
     * ```js
     * try {
     *  const plcState = await client.readPlcRuntimeState();
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    readPlcRuntimeState(targetOpts?: Partial<AmsAddress>): Promise<AdsState>;
    /**
     * Reads target TwinCAT system state from ADS port 10000 (usually `Run` or `Config`).
     *
     * NOTE: You might want to use the extended {@link readTcSystemExtendedState}() instead.
     *
     * If `targetOpts` is not used to override target, the state is also
     * saved to the `metaData.tcSystemState`.
     *
     * This is the same as {@link readState}(), except that the result is saved to
     * the `metaData.tcSystemState`.
     *
     * @example
     * ```js
     * try {
     *  const tcSystemState = await client.readTcSystemState();
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    readTcSystemState(targetOpts?: Partial<AmsAddress>): Promise<AdsState>;
    /**
     * Reads extended target TwinCAT system service state from ADS port 10000
     * if supported by target system. Extended version of the {@link readTcSystemState}().
     *
     * If `targetOpts` is not used to override target, the state is also
     * saved to the `metaData.tcSystemState`.
     *
     * NOTE: Might not be supported in older TwinCAT versions. If so, use {@link readTcSystemState}() instead.
     * Tested to work with 3.1.4022 and newer.
     *
     * @example
     * ```js
     * try {
     *  const tcSystemState = await client.readTcSystemServiceState();
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    readTcSystemExtendedState(targetOpts?: Partial<AmsAddress>): Promise<AdsTcSystemExtendedState>;
    /**
     * Reads target PLC runtime symbol version.
     *
     * Symbol version usually changes when the PLC software is updated with download.
     *
     * **NOTE:** This requires that the target is a PLC runtime or has equivalent ADS protocol support.
     *
     * Note that if `settings.rawClient` is not used, the symbol version should
     * already be up-to-date in `metaData.plcSymbolVersion`, as the client
     * subscribes to its changes during connecting.
     *
     * If `targetOpts` is not used to override target, the state is also
     * saved to the `metaData.plcSymbolVersion`.
     *
     * @example
     * ```js
     * try {
     *  const symbolVersion = await client.readPlcSymbolVersion();
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    readPlcSymbolVersion(targetOpts?: Partial<AmsAddress>): Promise<number>;
    /**
     * Subscribes to value change notifications (ADS notifications) by a variable path,
     * such as `GVL_Test.ExampleStruct`.
     *
     * Provided callback is called with the latest value of the symbol when the value changes or when
     * enough time has passed (depending on settings).
     *
     * Check also `subscribe()` instead, this is just a wrapper for it.
     *
     * **NOTE:** This requires that the target is a PLC runtime or has equivalent ADS protocol support.
     *
     * @example
     * ```js
     * //Checks if value has changed every 100ms
     * //Callback is called only when the value has changed
     * await client.subscribeValue(
     *  'GVL_Subscription.NumericValue_10ms',
     *  (data, subscription) => {
     *   console.log(`Value of ${subscription.symbol.name} has changed: ${data.value}`);
     *  },
     *  100
     * );
     * ```
     *
     * @param path Variable path in the PLC  (such as `GVL_Test.ExampleStruct`)
     * @param callback Callback function to call when a new value is received (`(data, subscription) => {}`)
     * @param cycleTime Cycle time for subscription (default: `200 ms`)
     *
     * - If `sendOnChange` is `true` (default), PLC checks if value has changed with `cycleTime` interval.
     * If the value has changed, the PLC sends the value and the callback is called.
     * - If `sendOnChange` is `false`, PLC constantly sends the value with `cycleTime` interval
     * and the callback is called.
     *
     * @param sendOnChange Send a new value only when the value has changed (default: `true`)
     *
     * - If `true` (default), the PLC checks the value for changes every `cycleTime` milliseconds. If the value has changed, PLC sends the new value and the callback is called.
     * - If `false`, the PLC sends the value cyclically every `cycleTime` milliseconds (and the callback is called)
     *
     * NOTE: When subscribing, the value is always sent once.
     *
     * @param maxDelay How long the PLC waits before sending the value at maximum? (default: `0` ms --> maximum delay is off)
     *
     * If the value is not changing, the first notification with the active value after subscribing is sent after `maxDelay`.
     *
     * If the value is changing, the PLC sends one or more notifications every `maxDelay`.
     *
     * So if `cycleTime` is 100 ms, `maxDelay` is 1000 ms and value changes every 100 ms, the PLC sends 10 notifications every 1000 ms.
     * This can be useful for throttling.
     *
     * @param targetOpts Optional target settings that override values in `settings`. If used, caching
     * is disabled -> possible performance impact.
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     *
     * @template T In Typescript, the data type of the value, for example `subscribeValue<number>(...)` or `subscribeValue<ST_TypedStruct>(...)`. (default: `any`)
     *
     */
    subscribeValue<T = any>(path: string, callback: SubscriptionCallback<T>, cycleTime?: number, sendOnChange?: boolean, maxDelay?: number, targetOpts?: Partial<AmsAddress>): Promise<ActiveSubscription<T>>;
    /**
     * Subscribes to raw value change notifications (ADS notifications) by a raw ADS address (index group, index offset and data length).
     *
     * Provided callback is called with the latest value when the value changes or when
     * enough time has passed (depending on settings).
     *
     * Check also `subscribe()` instead, this is just a wrapper for it.
     *
     * **NOTE:** This requires that the target is a PLC runtime or has equivalent ADS protocol support.
     *
     * @example
     * ```js
     * //Checks if value has changed every 100ms
     * //Callback is called only when the value has changed
     * await client.subscribeRaw(16448, 414816, 2, (data, subscription) => {
     *   console.log(`Value has changed: ${data.value.toString('hex')}`);
     *  }, 100);
     * ```
     *
     * @param indexGroup Index group (address) of the data to subscribe to
     * @param indexOffset Index offset (address) of the data to subscribe to
     * @param size Data length (bytes)
     * @param callback Callback function to call when a new value is received (`(data, subscription) => {}`)
     * @param cycleTime Cycle time for subscription (default: `200 ms`)
     *
     * - If `sendOnChange` is `true` (default), PLC checks if value has changed with `cycleTime` interval.
     * If the value has changed, the PLC sends the value and the callback is called.
     * - If `sendOnChange` is `false`, PLC constantly sends the value with `cycleTime` interval
     * and the callback is called.
     *
     * @param sendOnChange Send a new value only when the value has changed (default: `true`)
     *
     * - If `true` (default), the PLC checks the value for changes every `cycleTime` milliseconds. If the value has changed, PLC sends the new value and the callback is called.
     * - If `false`, the PLC sends the value cyclically every `cycleTime` milliseconds (and the callback is called)
     *
     * NOTE: When subscribing, the value is always sent once.
     *
     * @param maxDelay How long the PLC waits before sending the value at maximum? (default: `0` ms --> maximum delay is off)
     *
     * If the value is not changing, the first notification with the active value after subscribing is sent after `maxDelay`.
     *
     * If the value is changing, the PLC sends one or more notifications every `maxDelay`.
     *
     * So if `cycleTime` is 100 ms, `maxDelay` is 1000 ms and value changes every 100 ms, the PLC sends 10 notifications every 1000 ms.
     * This can be useful for throttling.
     *
     * @param targetOpts Optional target settings that override values in `settings`. If used, caching
     * is disabled -> possible performance impact.
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    subscribeRaw(indexGroup: number, indexOffset: number, size: number, callback: SubscriptionCallback<Buffer>, cycleTime?: number, sendOnChange?: boolean, maxDelay?: number, targetOpts?: Partial<AmsAddress>): Promise<ActiveSubscription<Buffer>>;
    /**
     * Subscribes to value change notifications (ADS notifications) by variable path
     * (such as `GVL_Test.ExampleStruct`) or raw ADS address (index group, index offset and data length).
     *
     * Provided callback is called with the latest value when the value changes or when
     * enough time has passed (depending on settings).
     *
     * **NOTE:** This requires that the target is a PLC runtime or has equivalent ADS protocol support.
     *
     * @example
     * ```js
     * //Checks if value has changed every 100ms
     * //Callback is called only when the value has changed
     * await client.subscribe({
     *  target: 'GVL_Subscription.NumericValue_10ms',
     *  callback: (data, subscription) => {
     *    console.log(`Value of ${subscription.symbol.name} has changed: ${data.value}`);
     *  },
     *  cycleTime: 100
     * });
     * ```
     *
     * @example
     * ```js
     * //Checks if value has changed every 100ms
     * //Callback is called only when the value has changed
     * await client.subscribe({
     *  target: {
     *    indexGroup: 16448,
     *    indexOffset: 414816,
     *    size: 2
     *  },
     *  callback: (data, subscription) => {
     *    console.log(`Value has changed: ${data.value}`);
     *  },
     *  cycleTime: 100
     * });
     * ```
     *
     * @param options Subscription options
     * @param targetOpts Optional target settings that override values in `settings`. If used, caching
     * is disabled -> possible performance impact.
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     *
     * @template T In Typescript, the data type of the value, for example `subscribe<number>(...)` or `subscribe<ST_TypedStruct>(...)`. If the target is a raw address, use `subscribe<Buffer>`. (default: `any`)
     */
    subscribe<T = any>(options: SubscriptionSettings<T>, targetOpts?: Partial<AmsAddress>): Promise<ActiveSubscription<T>>;
    /**
     * Unsubscribes the subscription (deletes ADS notification).
     *
     * PLC stops checking the value for changes (if configured so) and no longer sends new values.
     *
     * @example
     * ```js
     * const sub = await client.subscribe(...);
     *
     * //later
     * try {
     *  await client.unsubscribe(sub);
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param subscription Subscription to unsubscribe (created previously by subscribing for example using `subscribe()`)
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    unsubscribe(subscription: ActiveSubscription): Promise<void>;
    /**
     * Sends a delete ADS notification command to the target system.
     *
     * Doesn't delete subscriptions, just sends the ADS command.
     *
     * @param notificationHandle Notification handle to delete (number)
     * @param targetAmsAddress Target system address
     *
     * @throws NOTE: Throws error if failed
     */
    private deleteNotificationHandle;
    /**
     * Unsubscribes all active subscription (deletes all ADS notifications).
     *
     * PLC stops checking the values for changes (if configured so) and no longer sends new values.
     *
     * @example
     * ```js
     * const sub = await client.subscribe(...);
     * const sub2 = await client.subscribe(...);
     *
     * //later
     * try {
     *  await client.unsubscribeAll();
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    unsubscribeAll(): Promise<void>;
    /**
     * Reads target device information.
     *
     * This is the ADS protocol `ReadDeviceInfo` command.
     *
     * If `targetOpts` is not used to override target, the state is also
     * saved to the `metaData.deviceInfo`.
     *
     * @example
     * ```js
     * try {
     *  const deviceInfo = await client.readDeviceInfo();
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    readDeviceInfo(targetOpts?: Partial<AmsAddress>): Promise<AdsDeviceInfo>;
    /**
     * Reads target PLC runtime upload information.
     *
     * Upload information includes information about target PLC runtime data types and symbols (count and total data length).
     *
     * **NOTE:** This requires that the target is a PLC runtime or has equivalent ADS protocol support.
     *
     * If `targetOpts` is not used to override target, the upload info is also
     * saved to the `metaData.plcUploadInfo`.
     *
     * @example
     * ```js
     * try {
     *  const uploadInfo = await client.readPlcUploadInfo();
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    readPlcUploadInfo(targetOpts?: Partial<AmsAddress>): Promise<AdsUploadInfo>;
    /**
     * Returns all symbols from the target PLC runtime.
     *
     * **NOTE:** This requires that the target is a PLC runtime or has equivalent ADS protocol support.
     *
     * **WARNING:** The returned object might be VERY large!
     *
     * If `targetOpts` is not used to override target, the upload info is also
     * saved to the `metaData.symbols`.
     *
     * @example
     * ```js
     * try {
     *  const symbols = await client.getSymbols();
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     *
     * @param targetOpts Optional target settings that override values in `settings`
     */
    getSymbols(targetOpts?: Partial<AmsAddress>): Promise<AdsSymbolContainer>;
    /**
     * Caches all symbols from the target PLC runtime.
     *
     * Can be used to pre-cache all symbols to speed up communication.
     * Caching is only available for the original target configured in the settings.
     *
     * If caching is disabled using `settings.disableCaching` nothing is done.
     *
     * Calling `getSymbols()` without `targetOpts` has the same effect.
     *
     * **NOTE:** This requires that the target is a PLC runtime or has equivalent ADS protocol support.
     *
     * @example
     * ```js
     * try {
     *  await client.cacheSymbols();
     *  //client.metaData.plcSymbols now has all PLC runtime symbols
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    cacheSymbols(): Promise<void>;
    /**
     * Returns all target PLC runtime data types.
     *
     * If `targetOpts` is not used to override target and `settings.disableCaching` is not set,
     * the results are cached.
     *
     * **WARNING: The returned object might be VERY large!**
     *
     * As default, the results do not have subitems constructred, unlike when calling `getDataType()`.
     * To get all data types with full constructions (children and their children and so on), set parameter
     * `fullTypes` to `true`. **WARNING: This heavily increases the result size and CPU usage.**
     *
     * @example
     * ```js
     * try {
     *  const dataTypes = await client.getDataTypes();
     *  //with built data types
     *  const fullDataTypes = await client.getDataTypes(true);
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param buildFullTypes If `true`, all data types are built to include all subitems (and their subitems and so on)
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    getDataTypes(buildFullTypes?: boolean, targetOpts?: Partial<AmsAddress>): Promise<AdsDataTypeContainer>;
    /**
     * Caches all data types from the target PLC runtime.
     *
     * Can be used to pre-cache all data types to speed up communication.
     * Caching is only available for the original target configured in the settings.
     *
     * If caching is disabled using `settings.disableCaching` nothing is done.
     *
     * Calling `getDataTypes()` without `targetOpts` has the same effect.
     *
     * **NOTE:** This requires that the target is a PLC runtime or has equivalent ADS protocol support.
     *
     * @example
     * ```js
     * try {
     *  await client.cacheDataTypes();
     *  //client.metaData.plcDataTypes now has all PLC runtime data types
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    cacheDataTypes(): Promise<void>;
    /**
     * Reads raw data from the target system by a raw ADS address (index group, index offset and data length).
     *
     * This is the ADS protocol `Read` command.
     *
     * @example
     * ```js
     * try {
     *  const data = await client.readRaw(16448, 414816, 2);
     *  console.log(data); //<Buffer ff 7f>
     *
     *  const converted = await client.convertFromRaw(data, 'INT');
     *  console.log(converted); //32767
     *
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param indexGroup Index group (address) of the data to read
     * @param indexOffset Index offset (address) of the data to read
     * @param size Data length to read (bytes)
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    readRaw(indexGroup: number, indexOffset: number, size: number, targetOpts?: Partial<AmsAddress>): Promise<Buffer>;
    /**
     * Writes raw data to the target system by a raw ADS address (index group, index offset and data length).
     *
     * This is the ADS protocol `Write` command.
     *
     * @example
     * ```js
     * try {
     *  const data = await client.convertToRaw(32767, 'INT');
     *  console.log(data); //<Buffer ff 7f>
     *
     *  await client.writeRaw(16448, 414816, data);
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param indexGroup Index group (address) of the data to write to
     * @param indexOffset Index offset (address) of the data to write to
     * @param value Data to write
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    writeRaw(indexGroup: number, indexOffset: number, value: Buffer, targetOpts?: Partial<AmsAddress>): Promise<void>;
    /**
     * Sends multiple `readRaw()` commands in one ADS packet.
     *
     * Reads raw data from the target system by a raw ADS addresses (index group, index offset and data length).
     * Results are returned for each command separately - see {@link ReadRawMultiResult} for details.
     *
     * Uses ADS sum command under the hood (better and faster performance).
     * See [Beckhoff Information System](https://infosys.beckhoff.com/english.php?content=../content/1033/tc3_adsdll2/9007199379576075.html&id=9180083787138954512) for more info.
     *
     * @example
     * ```js
     * try {
     *  const results = await client.readRawMulti([
     *    {
     *      indexGroup: 16448,
     *      indexOffset: 414816,
     *      size: 2
     *    },
     *    {
     *      indexGroup: 16448,
     *      indexOffset: 414900,
     *      size: 128
     *    }
     *  ]);
     *
     *  if(results[0].success) {
     *    console.log(`First result: ${results[0].value}`); //First result: <Buffer ff 7f>
     *  } else {
     *    console.log(`First read command failed: ${results[0].errorStr}`);
     *  }
     *
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param commands Array of read commands
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    readRawMulti(commands: ReadRawMultiCommand[], targetOpts?: Partial<AmsAddress>): Promise<ReadRawMultiResult[]>;
    /**
     * Sends multiple `writeRaw()` commands in one ADS packet.
     *
     * Writes raw data to the target system by a raw ADS addresses (index group and index offset).
     * Results are returned for each command separately - see {@link WriteRawMultiResult} for details.
     *
     * Uses ADS sum command under the hood (better and faster performance).
     * See [Beckhoff Information System](https://infosys.beckhoff.com/english.php?content=../content/1033/tc3_adsdll2/9007199379576075.html&id=9180083787138954512) for more info.
     *
     * @example
     * ```js
     * try {
     *  const data1 = await client.convertToRaw(32767, 'INT');
     *  console.log(data1); //<Buffer ff 7f>
     *
     *  const data2 = Buffer.alloc(128); //example
     *
     *  const results = await client.writeRawMulti([
     *    {
     *      indexGroup: 16448,
     *      indexOffset: 414816,
     *      value: data1
     *    },
     *    {
     *      indexGroup: 16448,
     *      indexOffset: 414900,
     *      value: data2
     *    }
     *  ]);
     *
     *  if(results[0].success) {
     *    console.log(`First write command successful`);
     *  } else {
     *    console.log(`First write command failed: ${results[0].errorStr}`);
     *  }
     *
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param commands Array of write commands
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    writeRawMulti(commands: WriteRawMultiCommand[], targetOpts?: Partial<AmsAddress>): Promise<WriteRawMultiResult[]>;
    /**
     * Reads raw data from the target system by variable path (such as `GVL_Test.ExampleStruct`).
     *
     * Supports also reading `POINTER` and `REFERENCE` values (see example).
     *
     * This uses the ADS `READ_SYMVAL_BYNAME` under the hood, so only one
     * round-trip is needed.
     *
     * @example
     * ```js
     * try {
     *  const data = await client.readRawByPath('GVL_Read.StandardTypes.INT_');
     *  console.log(data); //<Buffer ff 7f>
     *
     *  const converted = await client.convertFromRaw(data, 'INT');
     *  console.log(converted); //32767
     *
     * //Reading a POINTER value (Note the dereference operator ^)
     * const ptrValue = await client.readRawByPath('GVL_Read.ComplexTypes.POINTER_^');
     *
     * //Reading a REFERENCE value
     * const refValue = await client.readRawByPath('GVL_Read.ComplexTypes.REFERENCE_');
     *
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param path Variable path in the PLC to read (such as `GVL_Test.ExampleStruct`)
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    readRawByPath(path: string, targetOpts?: Partial<AmsAddress>): Promise<Buffer>;
    /**
     * Writes raw data to the target system by variable path (such as `GVL_Test.ExampleStruct`).
     *
     * Supports also writing `POINTER` and `REFERENCE` values (see example).
     *
     * NOTE: Unlike with {@link readRawByPath}(), this command uses multiple ADS requests for the operation.
     *
     * @example
     * ```js
     * try {
     *  const data = await client.convertToRaw(32767, 'INT');
     *  console.log(data); //<Buffer ff 7f>
     *
     *  await client.writeRawByPath('GVL_Write.StandardTypes.INT_', data);
     *
     * //Writing a POINTER value (Note the dereference operator ^)
     * const ptrValue = ...
     * await client.writeRawByPath('GVL_Write.ComplexTypes.POINTER_^', ptrValue);
     *
     * //Writing a REFERENCE value
     * const refValue = ...
     * await client.writeRawByPath('GVL_Write.ComplexTypes.REFERENCE_');
     *
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param path Variable path in the PLC to write (such as `GVL_Test.ExampleStruct`)
     * @param value Data to write
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    writeRawByPath(path: string, value: Buffer, targetOpts?: Partial<AmsAddress>): Promise<void>;
    /**
     * Writes raw data to the target system by a raw ADS address (index group, index offset)
     * and reads the result as raw data.
     *
     * This is the ADS protocol `ReadWrite` command.
     *
     * @example
     * ```js
     * const { ADS } = require('../dist/ads-client');
     *
     * try {
     *  //Reading raw value by symbol path (= same as readRawByPath())
     *  const path = ADS.encodeStringToPlcStringBuffer('GVL_Read.StandardTypes.INT_');
     *  const data = await client.readWriteRaw(ADS.ADS_RESERVED_INDEX_GROUPS.SymbolValueByName, 0, 0xFFFFFFFF, path);
     *  console.log(data); //<Buffer ff 7f>
     *
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param indexGroup Address index group
     * @param indexOffset Address index offset
     * @param size Data length to read (bytes)
     * @param value Value to write
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    readWriteRaw(indexGroup: number, indexOffset: number, size: number, value: Buffer, targetOpts?: Partial<AmsAddress>): Promise<Buffer>;
    /**
     * Sends multiple `readWriteRaw()` commands in one ADS packet.
     *
     * Writes raw data to the target system by a raw ADS address (index group, index offset)
     * and reads the result as raw data.
     *
     * Uses ADS sum command under the hood (better and faster performance).
     * See [Beckhoff Information System](https://infosys.beckhoff.com/english.php?content=../content/1033/tc3_adsdll2/9007199379576075.html&id=9180083787138954512) for more info.
     *
     * @example
     * ```js
     * try {
     *  //Reading raw values by symbol paths (= same as readRawByPath())
     *  const path = ADS.encodeStringToPlcStringBuffer('GVL_Read.StandardTypes.INT_');
     *  const path2 = ADS.encodeStringToPlcStringBuffer('GVL_Read.StandardTypes.REAL_');
     *
     *  const results = await client.readWriteRawMulti([
     *    {
     *      indexGroup: ADS.ADS_RESERVED_INDEX_GROUPS.SymbolValueByName,
     *      indexOffset: 0,
     *      size: 0xFFFF,
     *      value: path
     *    },
     *    {
     *      indexGroup: ADS.ADS_RESERVED_INDEX_GROUPS.SymbolValueByName,
     *      indexOffset: 0,
     *      size: 0xFFFF,
     *      value: path2
     *    }
     *  ]);
     *
     *  if(results[0].success) {
     *    console.log(`First result: ${results[0].value}`); //First result: <Buffer ff 7f>
     *  } else {
     *    console.log(`First read/write command failed: ${results[0].errorStr}`);
     *  }
     *
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     *
     * ```
     *
     * @param commands Array of read/write commands
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    readWriteRawMulti(commands: ReadWriteRawMultiCommand[], targetOpts?: Partial<AmsAddress>): Promise<ReadWriteRawMultiResult[]>;
    /**
     * Reads variable's value from the target system by a variable path (such as `GVL_Test.ExampleStruct`)
     * and returns the value as a Javascript object.
     *
     * Returns variable's
     * - converted value
     * - raw value
     * - data type
     * - symbol
     *
     * **NOTE:** This requires that the target is a PLC runtime or has equivalent ADS protocol support.
     *
     * @example
     * ```js
     * try {
     *  const res = await client.readValue('GVL_Read.StandardTypes.INT_');
     *  console.log(res.value);
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param path Variable path in the PLC (such as `GVL_Test.ExampleStruct`)
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @template T In Typescript, the data type of the value, for example `readValue<number>(...)` or `readValue<ST_TypedStruct>(...)` (default: `any`)
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    readValue<T = any>(path: string, targetOpts?: Partial<AmsAddress>): Promise<ReadValueResult<T>>;
    /**
     * Reads variable's value from the target system by a symbol object (acquired using `getSymbol()`)
     * and returns the value as a Javascript object.
     *
     * Returns variable's
     * - converted value
     * - raw value
     * - data type
     * - symbol
     *
     * **NOTE:** This requires that the target is a PLC runtime or has equivalent ADS protocol support.
     *
     * @example
     * ```js
     * try {
     *  const symbol = await client.getSymbol('GVL_Read.StandardTypes.INT_');
     *
     *  const res = await client.readValueBySymbol(symbol);
     *  console.log(res.value);
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param symbol Symbol object
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @template T In Typescript, the data type of the value, for example `readValueBySymbol<number>(...)` or `readValueBySymbol<ST_TypedStruct>(...)` (default: `any`)
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    readValueBySymbol<T = any>(symbol: AdsSymbol, targetOpts?: Partial<AmsAddress>): Promise<ReadValueResult<T>>;
    /**
     * Writes variable's value to the target system by a variable path (such as `GVL_Test.ExampleStruct`).
     * Converts the value from a Javascript object to a raw value.
     *
     * Returns variable's
     * - converted value
     * - raw value
     * - data type
     * - symbol
     *
     * **NOTE:** Do not use `autoFill` for `UNION` types, it doesn't work correctly.
     *
     * **NOTE:** This requires that the target is a PLC runtime or has equivalent ADS protocol support.
     *
     * @example
     * ```js
     * try {
     *  const res = await client.writeValue('GVL_Write.StandardTypes.INT_', 32767);
     *  console.log('Value written:', res.value);
     *
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param path Variable path in the PLC (such as `GVL_Test.ExampleStruct`)
     * @param value Value to write
     * @param targetOpts Optional target settings that override values in `settings`
     * @param autoFill If set and the data type is a container (`STRUCT`, `FUNCTION_BLOCK` etc.), missing properties are automatically set to active values read from target (kept as-is).
     *
     * @template T In Typescript, the data type of the value, for example `writeValue<number>(...)` or `writeValue<ST_TypedStruct>(...)`
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    writeValue<T = any>(path: string, value: T, autoFill?: boolean, targetOpts?: Partial<AmsAddress>): Promise<WriteValueResult<T>>;
    /**
     * Writes variable's value to the target system by a symbol object (acquired using `getSymbol()`).
     * Converts the value from a Javascript object to a raw value.
     *
     * Returns variable's
     * - converted value
     * - raw value
     * - data type
     * - symbol
     *
     * **NOTE:** Do not use `autoFill` for `UNION` types, it doesn't work correctly.
     *
     * **NOTE:** This requires that the target is a PLC runtime or has equivalent ADS protocol support.
     *
     * @example
     * ```js
     * try {
     *  const symbol = await client.getSymbol('GVL_Read.StandardTypes.INT_');
     *
     *  const res = await client.writeValueBySymbol(symbol, 32767);
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param symbol Symbol object
     * @param value Value to write
     * @param targetOpts Optional target settings that override values in `settings`
     * @param autoFill If set and the data type is a container (`STRUCT`, `FUNCTION_BLOCK` etc.), missing properties are automatically set to active values read from target (kept as-is).
     *
     * @template T In Typescript, the data type of the value, for example `writeValue<number>(...)` or `writeValue<ST_TypedStruct>(...)`
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    writeValueBySymbol<T = any>(symbol: AdsSymbol, value: T, autoFill?: boolean, targetOpts?: Partial<AmsAddress>): Promise<WriteValueResult<T>>;
    /**
     * Returns a default (empty) Javascript object representing provided PLC data type.
     *
     * @example
     * ```js
     * try {
     *  const res = await client.getDefaultPlcObject('INT');
     *  console.log(res); //0
  
     *  const res2 = await client.getDefaultPlcObject('Tc2_Standard.TON');
     *  console.log(res2); //{ IN: false, PT: 0, Q: false, ET: 0, M: false, StartTime: 0 }
     *
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param dataType Data type name in the PLC as string (such as `ST_Struct`) or data type object (acquired using {@link getDataType}())
     * @param attributes Additional attributes of the symbol or data type used for conversion
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @template T Typescript data type of the PLC data, for example `getDefaultPlcObject<number>(...)` or `getDefaultPlcObject<ST_TypedStruct>(...)`
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    getDefaultPlcObject<T = any>(dataType: string | AdsDataType, attributes?: AdsAttributeEntry[], targetOpts?: Partial<AmsAddress>): Promise<T>;
    /**
     * Converts raw data to a Javascript object by using the provided data type.
     *
     * @example
     * ```js
     * try {
     *  const data = await client.readRaw(16448, 414816, 2);
     *  console.log(data); //<Buffer ff 7f>
     *
     *  const converted = await client.convertFromRaw(data, 'INT');
     *  console.log(converted); //32767
     *
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param data Raw data (acquired for example using {@link readRaw}())
     * @param dataType Data type name in the PLC as string (such as `ST_Struct`) or data type object (acquired using {@link getDataType}())
     * @param attributes Additional attributes of the symbol or data type used for conversion
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @template T Typescript data type of the PLC data, for example `convertFromRaw<number>(...)` or `convertFromRaw<ST_TypedStruct>(...)`
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    convertFromRaw<T = any>(data: Buffer, dataType: string | AdsDataType, attributes?: AdsAttributeEntry[], targetOpts?: Partial<AmsAddress>): Promise<T>;
    /**
     * Converts a Javascript object to raw data by using the provided data type.
     *
     * **NOTE:** Do not use `autoFill` for `UNION` types, it doesn't work correctly.
     
     * @example
     * ```js
     * try {
     *  const data = await client.convertToRaw(32767, 'INT');
     *  console.log(data); //<Buffer ff 7f>
     *
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param value Value to convert
     * @param dataType Data type name in the PLC as string (such as `ST_Struct`) or data type object (acquired using {@link getDataType}())
     * @param autoFill autoFill If set and the data type is a container (`STRUCT`, `FUNCTION_BLOCK` etc.), missing properties are automatically set to default values (`0` or empty string).
     * @param attributes Additional attributes of the symbol or data type used for conversion
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    convertToRaw(value: any, dataType: string | AdsDataType, autoFill?: boolean, attributes?: AdsAttributeEntry[], targetOpts?: Partial<AmsAddress>): Promise<Buffer>;
    /**
     * Creates a handle to a variable at the target system by variable path (such as `GVL_Test.ExampleStruct`).
     *
     * The handle can be then used for reading and writing the value.
     *
     * Reading and writing dereferenced `POINTER` and `REFERENCE` values is also possible.
     * See {@link readRawByHandle}() and {@link writeRawByHandle}().
     *
     * NOTE: The handle should be deleted after it's no longer needed,
     * as there is a limited amount of handles available. See {@link deleteVariableHandle}().
     *
     * @example
     * ```js
     * try {
     *  //POINTER value (Note the dereference operator ^)
     *  const handle1 = await client.createVariableHandle('GVL_Read.ComplexTypes.POINTER_^');
     *  const value = await client.readRawByHandle(handle1);
     *  await client.deleteVariableHandle(handle1);
     *
     *  const handle2 = await client.createVariableHandle('GVL_Read.StandardTypes.INT_');
     *  const value2 = await client.readRawByHandle(handle2);
     *  await client.deleteVariableHandle(handle2);
     *
     *  //Now you use convertFromRaw() to get actual values
     *
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param path Variable path in the PLC to read (such as `GVL_Test.ExampleStruct`)
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    createVariableHandle(path: string, targetOpts?: Partial<AmsAddress>): Promise<VariableHandle>;
    /**
     * Sends multiple {@link createVariableHandle}() commands in one ADS packet.
     *
     * Creates a handle to a variable at the target system by variable path (such as `GVL_Test.ExampleStruct`).
     *
     * The handle can be then used for reading and writing the value.
     *
     * Reading and writing dereferenced `POINTER` and `REFERENCE` values is also possible.
     * See {@link readRawByHandle}() and {@link writeRawByHandle}().
     *
     * NOTE: The handle should be deleted after it's no longer needed,
     * as there is a limited amount of handles available. See {@link deleteVariableHandle}().
     *
     * Uses ADS sum command under the hood (better and faster performance).
     * See [Beckhoff Information System](https://infosys.beckhoff.com/english.php?content=../content/1033/tc3_adsdll2/9007199379576075.html&id=9180083787138954512) for more info.
     *
     * @example
     * ```js
     * try {
     *  const results = await client.createVariableHandleMulti([
     *    'GVL_Read.StandardTypes.INT_',
     *    'GVL_Read.StandardTypes.REAL_'
     *  ]);
     *
     *  if(results[0].success) {
     *    console.log(`First handle: ${results[0].handle}`);
     *  } else {
     *    console.log(`Creating first handle failed: ${results[0].errorStr}`);
     *  }
     *
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param paths Array of variable paths in the PLC to read (such as `GVL_Test.ExampleStruct`)
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    createVariableHandleMulti(paths: string[], targetOpts?: Partial<AmsAddress>): Promise<CreateVariableHandleMultiResult[]>;
    /**
     * Deletes a variable handle that was previously created
     * using {@link createVariableHandle}().
     *
     * @example
     * ```js
     * try {
     *  const handle = createVariableHandle(...);
     *
     *  //After use, deleting the handle
     *  await client.deleteVariableHandle(handle);
     *
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param handle Variable handle to delete
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    deleteVariableHandle(handle: VariableHandle | number, targetOpts?: Partial<AmsAddress>): Promise<void>;
    /**
     * Sends multiple {@link deleteVariableHandle}() commands in one ADS packet.
     *
     * Deletes a variable handle that was previously created
     * using {@link createVariableHandle}().
     *
     * Uses ADS sum command under the hood (better and faster performance).
     * See [Beckhoff Information System](https://infosys.beckhoff.com/english.php?content=../content/1033/tc3_adsdll2/9007199379576075.html&id=9180083787138954512) for more info.
     *
     * @example
     * ```js
     * try {
     *  const handle1 = createVariableHandle(...);
     *  const handle2 = createVariableHandle(...);
     *
     *  //After use, deleting the handles
     *  const results = await client.deleteVariableHandleMulti([handle1, handle2]);
     *
     *  if(results[0].success) {
     *    console.log(`First deleted`);
     *  } else {
     *    console.log(`Deleting first handle failed: ${results[0].errorStr}`);
     *  }
     *
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param handles Array of variable handles to delete
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    deleteVariableHandleMulti(handles: (VariableHandle | number)[], targetOpts?: Partial<AmsAddress>): Promise<DeleteVariableHandleMultiResult[]>;
    /**
     * Reads raw data from the target system by a previously created variable handle (acquired using {@link createVariableHandle}())
     *
     * @example
     * ```js
     * try {
     *  const handle = await client.createVariableHandle('GVL_Read.StandardTypes.INT_'');
     *  const value = await client.readRawByHandle(handle);
     *  await client.deleteVariableHandle(handle);
     *
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     * @param handle Variable handle
     * @param size Optional data length to read (bytes) - as default, size in handle is used if available. Uses 0xFFFFFFFF as fallback.
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    readRawByHandle(handle: VariableHandle | number, size?: number, targetOpts?: Partial<AmsAddress>): Promise<Buffer>;
    /**
     * Writes raw data to the target system by a previously created variable handle (acquired using {@link createVariableHandle}())
     *
     * @example
     * ```js
     * try {
     *  const value = await client.convertToRaw(32767, 'INT');
     *  console.log(value); //<Buffer ff 7f>
     *
     *  const handle = await client.createVariableHandle('GVL_Read.StandardTypes.INT_');
     *  await client.writeRawByHandle(handle, value);
     *  await client.deleteVariableHandle(handle);
     *
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param handle Variable handle
     * @param value Data to write
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    writeRawByHandle(handle: VariableHandle | number, value: Buffer, targetOpts?: Partial<AmsAddress>): Promise<void>;
    /**
     * Reads raw data from the target system by a symbol object (acquired using `getSymbol()`)
     *
     * @example
     * ```js
     * try {
     *  const symbol = await client.getSymbol('GVL_Read.StandardTypes.INT_');
     *  const value = await client.readRawBySymbol(symbol);
     *
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param symbol Symbol
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    readRawBySymbol(symbol: AdsSymbol, targetOpts?: Partial<AmsAddress>): Promise<Buffer>;
    /**
     * Writes raw data to the target system by a symbol object (acquired using `getSymbol()`)
     *
     * @example
     * ```js
     * try {
     *  const value = await client.convertToRaw(32767, 'INT');
     *  console.log(value); //<Buffer ff 7f>
     *
     *  const symbol = await client.getSymbol('GVL_Read.StandardTypes.INT_');
     *  await client.writeRawBySymbol(symbol, value);
     *
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param symbol Symbol
     * @param value Data to write
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    writeRawBySymbol(symbol: AdsSymbol, value: Buffer, targetOpts?: Partial<AmsAddress>): Promise<void>;
    /**
     * Invokes a function block RPC method on the target system.
     *
     * Returns the return value of the method and outputs (if any).
     *
     * NOTE: In the PLC, `{attribute 'TcRpcEnable'}` is required above the `METHOD` definition.
     *
     * @example
     * ```js
     * try {
     *  const res = await client.invokeRpcMethod('GVL_RPC.RpcBlock', 'Calculator', {
     *    Value1: 1,
     *    Value2: 123
     *  });
     *
     *  console.log(res);
     *  //{
     *  //  returnValue: true,
     *  //  outputs: { Sum: 124, Product: 123, Division: 0.008130080997943878 }
     *  //}
     *
     * } catch (err) {
     *  console.log("Error:", err);
     * }
     * ```
     *
     * @param path Variable path in the PLC of the function block instance (such as `GVL_Test.ExampleBlock`)
     * @param method Function block method name
     * @param parameters Method parameters (inputs) (if any)
     * @param targetOpts Optional target settings that override values in `settings`
     *
     * @template T Typescript data type of the method return value, for example `invokeRpcMethod<number>(...)` or `invokeRpcMethod<ST_TypedStruct>(...)`
     * @template U Typescript data type of the method outputs object, for example `invokeRpcMethod<number, ST_TypedStruct>(...)`
     *
     * @throws Throws an error if sending the command fails or if the target responds with an error.
     */
    invokeRpcMethod<T = any, U = Record<string, any>>(path: string, method: string, parameters?: Record<string, any>, targetOpts?: Partial<AmsAddress>): Promise<RpcMethodCallResult<T, U>>;
}
